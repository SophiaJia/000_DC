AS.Number() %>%
fixchar()%>%
As.int2fac %>%
As.integer
}
## Fuzzy Cleaning per column
FuzzyClean_col <- function(x){
if(IS.Date(x)){
#fixDate is for the whole dataset, not for column.
y = fixDate_col(x)
}else if(IS.Number2(x)){
y = parse_number(x)
if(sum(y%%1==0,na.rm = TRUE) == sum(!is.na(y))){
y = as.integer(y)
if(((table(y) %>% length) < 6 & is.numeric(y))){
y = as.factor(y)
}
}
}else{
y = fixchar_col(x)
}
y
}
FuzzyClean2 <- function(Dat){
Dat %>% mutate_all(FuzzyClean_col)
}
##### time measure
# Org_test <- read.csv("testdata/eg_large_mut.csv",stringsAsFactors = FALSE)
# Org_test <- Org_test %>% filter(!ID. == "")
#
# Org_test <- read.csv("testdata/to test/longitu test_number.csv",,stringsAsFactors = FALSE)
#
# start_time <- Sys.time()
# tttt1<- FuzzyClean(Org_test)
# end_time <- Sys.time()
#
# testtime1 <- end_time - start_time
#
#
# start_time <- Sys.time()
# tttt2<- FuzzyClean2(Org_test)
# end_time <- Sys.time()
#
# testtime2 <- end_time - start_time
AutoClean <- function(Dat , rule , outfile = "Report.xlsx"){
NewDat1 <- FuzzyClean2(Dat)
NewDat2 <- NewDat1
rule[,2] <- sapply(NewDat1[unlist(m[,1])],mode)
for(i in 1: length(rule[,2])){
if (rule[i,2] == "character" & !is.null(rule[i,3][[1]]) ){
NewDat2[rule[i,1][[1]]] <- fixScale2(NewDat1[[rule[i,1][[1]]]] %>% toupper %>% str_trim, rule[i,3][[1]])
}
if (rule[i,2] == "numeric" & !is.null(rule[i,4][[1]]) ){
NewDat2[rule[i,1][[1]]] <- fixrange(NewDat1[[rule[i,1][[1]]]], rule[i,4][[1]])
}
}
if(!is.null(outfile)){
reporttmp(Dat, NewDat2, outfile)
}
# the following is for analysis use, will not included in the output
# after checking the range of integer as numeric columne, if the integar is less than 5 levels then save as factor
NewDat2
}
##%######################################################%##
#                                                          #
####                   exact cleaning                   ####
#                                                          #
##%######################################################%##
## functions ################################################
# fixDate<- function(Data){
#   Data %>% mutate_if(grepl("date", colnames(.)), mdy)
#   #last.warning %>% names
# }
fixScale <- function(x, ScaleType){
Dtmp  <- adist(x, ScaleType) ## all
colnames(Dtmp) <- ScaleType
rownames(Dtmp) <- x
i <- apply(Dtmp, 1, which.min)
tmp <- data.frame(rawtext = x, coded = ScaleType[i])
tmp
}
fixScale2 <- function(varb, ScaleType,maxDist=100){
Dtmp <- sapply(varb, function(x) amatch(x,ScaleType, maxDist=maxDist)) # Inf = all, or specify a number
ScaleType[Dtmp]
}
fixrange <- function(x, range_hard, range_soft = NULL){
y = x %>% parse_number()
y[y <= range_hard[1]&!is.na(y)] <- NA
y[y >= range_hard[2]&!is.na(y)] <- NA
if (!is.null(range_soft)){
y[y <= range_soft[1]&!is.na(y)] <- NA
y[y >= range_soft[2]&!is.na(y)] <- NA
}
y
}
##%######################################################%##
#                                                          #
####                  data transform                    ####
#                                                          #
##%######################################################%##
long2wide <- function(data, ID = NULL, var_base = NULL, var_vist = NULL){
if(is.null(ID)){
warning("Missing ID ")
break
}
if(is.null(var_base)){
warning("Baseline Variable Index: var_base")
break
}
# add visit times
in_id <- which(colnames(data) == ID)
ttt <- data %>% group_by_at(in_id) %>% mutate(Imakethistime = row_number())
# get baseline variable which is the same for each patients
PerPatient <- ttt[,var_base]
# visit variable which is different per visit
pervisit <- ttt[,c(ID, colnames(ttt)[!colnames(ttt) %in% var_base])]
# transform
nvisit <- max(pervisit$Imakethistime)
Dwide <- unique(PerPatient)
for (i in (1:nvisit)){
# need to fix the name
tmpd <- pervisit[pervisit$Imakethistime == i,]
colnames(tmpd)[-1] <- paste("Time",i,colnames(tmpd)[-1], sep = ".")
Dwide <- left_join(Dwide, tmpd[-ncol(tmpd),], by = ID)
}
Dwide
}
#what <- long2wide(longitu_test, ID = "patient.code", var_base = longitu_test[,c(1:7)] %>%  colnames())
#long2wide(longitu_test,  var_base = longitu_test[,c(1:7)] %>%  colnames())
wide2long <- function(data, ID = NULL, var_base = NULL, timename = NA, nvisit = NA){
key <- array()
long <- tibble()
in_id <- which(colnames(data) == ID)
PerPatient <- data[,var_base]
for (i in (1:nvisit)){
# need to fix the name
key[i] <- paste(timename, i, sep = ".")
tmpd   <- data %>% select(c(starts_with(key[i])))
tmpd   <- tmpd %>% mutate(time_m = i)
tmpd   <- bind_cols(data[ID],tmpd)
colnames(tmpd) <- gsub(key[i],"",colnames(tmpd))
tmpd2 <- left_join(PerPatient,tmpd , by = ID)
# should be the same for each visit.
long <- bind_rows(long,tmpd2)
}
#long <- long[order(long[,in_id] %>% as.vector),]
long <- arrange(long,long[[in_id]])
long
}
#what2 <- wide2long(wide_test, ID = "patient.code", var_base = wide_test[,(1:6)] %>%  colnames(), timename = "Time", nvisit = 4)
##%######################################################%##
#                                                          #
####                       output                       ####
#                                                          #
##%######################################################%##
reporttmp <- function(Org_data, New_data, f = "tmp.xlsx"){
f = f
OrgName = names(Org_data)
NewName = names(New_data)
# freq table
OrgTable = vector("list", length = length(OrgName))
NewTable = vector("list", length = length(NewName))
#columes which is not date type will be in the freq table
ColIndex <- c(1:length(OrgName))[sapply(New_data, class) != "Date"]
names(OrgTable) = OrgName
names(NewTable) = NewName
for (i in ColIndex) {
D1 = tabyl(as.character(Org_data[[i]]), sort = T)[1:3]
names(D1)[1] = "value"
OrgTable[[i]] = D1
D2 = tabyl(as.character(New_data[[i]]), sort = T)[1:3]
names(D2)[1] = "value"
NewTable[[i]] = D2
}
d = bind_cols(Org_data, New_data)
d = d[order(names(d))]
(modS = seq(2, length(d), 2))
I = d
I[] = 0
for (j in modS) {
if (class(d[[j]]) == "Date"){
#d[[j]] = as.character(d[[j]])
I[j] = (( str_length(d[[j-1]]) >0) & is.na(d[[j]]))
}
else (I[j] = (as.character(d[[j - 1]]) %>% toupper %>% str_trim != as.character(d[[j]])%>% toupper %>% str_trim))
}
hs1 = createStyle(fgFill = "#DCE6F1", halign = "CENTER",
textDecoration = "bold")
redStyle = createStyle(fontColour = "#FF0000")
wb <- createWorkbook()
sht = "Suggestions"
addWorksheet(wb, sht)
writeData(wb, sht, d, startRow = 1, headerStyle = hs1)
for (i in 1:length(modS)) addStyle(wb, sht, style = redStyle,
rows = 1 + which(I[[modS[i]]]), cols = modS[i])
setColWidths(wb, sht, cols = 1:(dim(d)[2]), widths = "auto")
freezePane(wb, sht, firstRow = TRUE, firstCol = TRUE)
for (i in ColIndex) {
sht = str_c(substrRight(OrgName[i],30))
print(sht)
addWorksheet(wb, sht)
writeData(wb, sht, "Original/Dirty", startRow = 1, startCol = 1)
writeData(wb, sht, OrgTable[[OrgName[i]]], startRow = 2, headerStyle = hs1)
setColWidths(wb, sht, cols = 1:(dim(OrgTable[[i]])[2]), widths = "auto")
writeData(wb, sht, "Scrubbed/Clean", startRow = 1, startCol = 5)
writeData(wb, sht, NewTable[[NewName[i]]], startRow = 2, startCol = 5,
headerStyle = hs1)
setColWidths(wb, sht, cols = 5:(5 + (dim(NewTable[[NewName[i]]])[2])),
widths = "auto")
freezePane(wb, sht, firstActiveRow = 3)
}
saveWorkbook(wb, file = f, overwrite = TRUE)
}
x = Dtest$tnpr
c2
if(c2[,"number"]>0){
# the column is numeric
y = as.numeric(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
x
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
library(tidyverse)
parse_number("f3")
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
### text a column
text_filter_pre <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
text_filter_cell(Dtest$patient.code)
text_filter_pre(Dtest$patient.code)
text_filter_pre(Dtest[,1])
text_filter_pre(Dtest$Gender)
x <- Dtest$Gender
x
table(sapply(x,text_filter_cell))
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
names(C1)
names(c1)
"number" %>% names(c1)
"number" %in% names(c1)
# the column is numeric
y = parse_number(x)
### text a column
text_filter_pre <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if("number" %in% names(c1)){
# the column is numeric
y = parse_number(x)
}else if("text" %in% names(c1)){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
text_filter_pre(Dtest$Gender)
text_filter_pre(Dtest$Date.of.birth)
text_filter_pre(Dtest$KPS)
text_filter_pre(Dtest$tnp)
text_filter_pre(Dtest$tn)
Dtest$tn
Dtest$tnp
text_filter_pre(Dtest$tnpr)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
install.packages("lubridate")
library(lubridate)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
library(tidyverse)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
Dtest %>% fixDate()
text_filter_cell("t;")
text_filter_cell <- function(x){
#input : string
#output : text, number, mix
#date variable consider as mix
options(warn=-1)
y = "Mtext"
if(is.na(x)) y = NA #csv file can recognize NA
else if(!grepl("[^A-Za-z]", x)) y = "text"
else if (!is.na(as.numeric(x))) y = "number"
else if(grepl("\\d",x)) y = "Mnumber"
y
}
library(shiny); runApp('Sophia_0712_shiny3.R')
install.packages("openxlsx")
runApp('Sophia_0712_shiny3.R')
install.packages("janitor")
runApp('Sophia_0712_shiny3.R')
install.packages("stringdist")
runApp('Sophia_0712_shiny3.R')
install.packages("tableone")
runApp('Sophia_0712_shiny3.R')
install.packages("shinyBS")
runApp('Sophia_0712_shiny3.R')
install.packages("shinyjs")
runApp('Sophia_0712_shiny3.R')
install.packages("DT")
runApp('Sophia_0712_shiny3.R')
install.packages("plotly")
runApp('Sophia_0712_shiny3.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
library(shiny)
library(tidyverse)
library(openxlsx)
library(janitor)
library(stringdist)
library(lubridate)
library(tableone)
library(shinyBS)
library(shinyjs)
library(DT)
library(plotly)
library(readxl)
ui <- fluidPage(
# Here everything is an argument to fluidPage(), so commas are needed between blocks
titlePanel("Understand Your Data"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose XLSX/CSV File to Upload",accept=c(".xlsx",".csv")),
hr(),
textInput("varID", "Number of your ID colume", value = "1"),
radioButtons("datatype", label = "Data Type",
choices = list("Patient per row（Default）" = "wide","Visit per row" = "long"),
selected = 1),
hr(),
#textInput(inputId = "outFileName",label = "Output File Name:",value = "processed.xlsx"),
checkboxGroupInput("download_check", "Download",
choices = list("Clean Data" = 1, "Dirty/Clean Compare" = 2, "Transformed Data" = 3, "Table 1" = 4),
selected = 1),
downloadButton("downloadData", "Download Output"),
width = 3
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Instruction",
h5("Step one")
),
tabPanel("Continuous",
h4("Summary table"),
h5("This page summarizes the continuous variable of your data. If you think any range is incorrect, check it manually."),
dataTableOutput("inpContinuous"),
h4("Data Checking (Select the variable)"),
htmltools::div(style = "display:inline-block", plotlyOutput("con_hist", width = 540, height = 200)),
wellPanel(
style = "display:inline-block; vertical-align:bottom;",
sliderInput("xbins", "Number of x bins",
min = 1, max = 50, value = 20, width = 230)
),
textInput("con_min", "Minimum value", value = "0"),
textInput("con_max", "Maximum Value", value = "100"),
actionButton("con_check", label = "Check")
) ,
tabPanel("Categorical",
h4("1.Variables with one level, recommend remove"),
h5("These variables only have one layer. It might because 1) all of the patients have the same value, in which case you can remove this column; 2) it is non-random missing, in which case you should check your data."),
dataTableOutput("inpCategorical1"),
hr(),
h4("2.Variables with 2-4 levels, check correctness"),
h5("These variables have 2 - 4 levels, which is suitable for analysis. However, you still need to check if there are typos and make sure that the level number is correct. E.g., gender should has only two levels. "),
dataTableOutput("inpCategorical234"),
hr(),
h4("3.Variables more than 5 levels, recommend clean up"),
h5("These variables have more than four levels. It usually is not suitable for analysis. We recommend you to check if to and try your best to compress less than four. "),
dataTableOutput("inpCategorical5")),
tabPanel("Date",
h4("Date Summary"),
h4("Reorder the date column"),
dataTableOutput("inpDate"),
actionButton("date_exchage", label = "Reorder"),
actionButton("date_notshow", label = "Hide"),
actionButton("date_reset", label = "Reset"),
actionButton("date_check",   label = "Check"),
h4("Something wrong with the date"),
dataTableOutput("date_wrong_out")
),
tabPanel("Cleaned Data",
h5("If your data is repeated measure and has per visit per row,choose the column that indicates patient characteristics"),
dataTableOutput("afterclean")
),
tabPanel("Wide Type Data",
h5("This is for repeated measure data only"),
dataTableOutput("wide")),
tabPanel("Summary",
h4("Summary"),
textOutput("inpSummary"),
hr(),
#h4("Exact Duplicate"),
#dataTableOutput("dup"),
#hr(),
h4("Table 1"),
dataTableOutput("table1"),
h5("We made some default changes to your data; please download for more details."))
)
)
)
)
server <- function(input, output, session) {
options(shiny.maxRequestSize=30*1024^2)
options(DT.options = list(pageLength = 15))
}
shinyApp(ui, server)
options(shiny.maxRequestSize=30*1024^2)
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
library(shiny); runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0823.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
?setdiff
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
library(shiny); runApp('V1_0906.R')
runApp('V1_0911.R')
library(shiny)
install.packages("shiny")
install.packages("tidyverse")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("tidyverse")
install.packages("openxlsx")
install.packages("janitor")
install.packages("stringdist")
install.packages("lubridate")
install.packages("tableone")
install.packages("shinyBS")
install.packages("shinyjs")
install.packages("DT")
install.packages("plotly")
install.packages("readxl")
runApp('V1_0911.R')
