}
#testing
letters <- "abc"
numbers <- "12.3"
mix <- "b1dd"
tmp <- eg_long$WBRT.dose
tmp2 <- paste(eg_long$WBRT.dose, eg_long$Pathology)
text_filter_cell(letters)
text_filter_cell(numbers)
text_filter_cell(mix)
text_filter_cell(tmp2[7])
text_filter_cell("32;")
text_filter_cell(";")
text_filter_cell("t;")
text_filter_cell("1.1.1.1.1")
### text a column
text_filter_col <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if("number" %in% names(c1)){
# the column is numeric
y = FALSE
}else if("text" %in% names(c1)){
# the column is text
y = TRUE
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
library(shiny); source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
library(shiny); source('ShinyApp.R')
source('arch/V1_1001.R')
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
require(gdata)
df = read.xls (path), sheet = 1, header = TRUE)
df = read.xls (path, sheet = 1, header = TRUE)
?read.xls
path = "testdata/Other/eg_date.xlsx"
df = read.xls (path, sheet = 1, header = TRUE)
d1 = read.xls (path, sheet = 1, header = TRUE)
d1 = read.xls (path, sheet = 1, header = TRUE)
d1 = read.xls (path, sheet = 1, header = TRUE)
path = "testdata/Other/eg_date.xlsx"
require(gdata)
d1 = read.xls (path, sheet = 1, header = TRUE)
View(d1)
d2 <- read_excel("testdata/Other/eg_date.xlsx")
library(readxl)
d2 <- read_excel("testdata/Other/eg_date.xlsx")
View(d2)
wb = loadWorkbook(path)
require(XLConnect)
wb = loadWorkbook(path)
d3 = readWorksheet(wb, sheet = "Sheet1", header = TRUE)
View(d3)
require(xlsx)
install.packages("xlsx")
require(xlsx)
d4 = read.xlsx(path, sheetName = "Sheet1")
View(d4)
View(d4)
View(d1)
View(d4)
d5 = read.xlsx2(path, sheetName = "Sheet1")
source("https://gist.github.com/schaunwheeler/5825002/raw/3526a15b032c06392740e20b6c9a179add2cee49/xlsxToR.r")
d6 = function(path, header = TRUE)
xlsxToR = function(path, header = TRUE)
xlsxToR = function(path, header = TRUE)
library(openxlsx)
library(openxlsx)
detach("package:gdata", unload=TRUE)
detach(xlsx)
detach("package:xlsx", unload=TRUE)
detach("package:openxlsx", unload=TRUE)
library("openxlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
d6 = read.xlsx(path, sheetName = "Sheet1")
d6 = read.xlsx(path)
View(d6)
path = "testdata/to test/longitu test.xls"
require(gdata)
d1 = read.xls (path, sheet = 1, header = TRUE)
library(readxl)
d2 <- read_excel(path)
require(XLConnect)
View(d1)
View(xlsxToR)
?XML
??XML
# source("https://gist.github.com/schaunwheeler/5825002/raw/3526a15b032c06392740e20b6c9a179add2cee49/xlsxToR.r")
p7 = xlsxToR(path, header = TRUE)
path = "testdata/Other/eg_date.xlsx"  #gdata is the best, XLConnect is the second
source("https://gist.github.com/schaunwheeler/5825002/raw/3526a15b032c06392740e20b6c9a179add2cee49/xlsxToR.r")
p7 = xlsxToR(path, header = TRUE)
install.packages("XML")
install.packages("pbapply")
p7 = xlsxToR(path, header = TRUE)
source("https://gist.github.com/schaunwheeler/5825002/raw/3526a15b032c06392740e20b6c9a179add2cee49/xlsxToR.r")
p7 = xlsxToR(path, header = TRUE)
View(p7)
d1 = read.xls (path, sheet = 1, header = TRUE)
d1$Date.of.GKRS
class(d1$Date.of.GKRS )
View(d1)
d1$study.
class(d1$study.)
?gdata
path = "testdata/Other/eg_date.xlsx"  #gdata is the best, XLConnect is the second
require(gdata)
d1 = read.xls (path, sheet = 1, header = TRUE)
source('~/Google Drive/CCF/000_DC/PrimaryFunc.R')
colnames(d1)
d1$Date.of.GKRS
View(d1)
d1$Lesion.1st.F.UP.
?read.xls
d1 = read.xls (path, sheet = 1, header = TRUE)
d1$Lesion.1st.F.UP.
x = d1$Lesion.PreGKRS
IS.Date(x)
WhichDF(x)
library(lubridate)
WhichDF(x)
y = fixDate(x)
library(tidyverse)
y = fixDate(x)
y = fixDate_col(x)
6
y
fixDate_col
FuzzyClean_col()
FuzzyClean_col
IS.Date()
IS.Date
as.Date
?as.Date
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates)
d1$Lesion.PreGKRS
d2 = read.csv(path2)
path2 = "testdata/eg1.csv"
d2 = read.csv(path2)
d2$Date.of.last.f.u
d2$Date.of.last.f.u[5]
as.Date(d2$Date.of.last.f.u[5])
charToDate
??charToDate
??charToDate
as.Date(d2$Date.of.last.f.u[5], "%m/%d/%y")
?strptime
xx = d2$Date.of.last.f.u[5]
strptime(xx, f <- "%d $B %Y", tz = "GMT")
strptime(xx, f <- "%B $d %Y", tz = "GMT")
as.Date(d2$Date.of.last.f.u[5],"%B %d %Y")
as.Date(d2$Date.of.last.f.u[5],format = "%B %d %Y")
xx
as.Date(xx,"%B %d %Y")
dates <- c("May 27 1984", "July 7 2005")
betterDates <- as.Date(dates,
format = "%B %d %Y")
betterDates
as.Date(d2$Date.of.last.f.u[5],format = "%B, %d %Y")
as.Date(d2$Date.of.last.f.u[5],format = "%B %d, %Y")
dates <- c("05/27/84", "07/07/05", "08/17/20")
as.Date(dates, "%m/%d/%y")
mdy(dates)
xx
d1$Lesion.PreGKRS
as.date(d1$Lesion.PreGKRS,format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d")
)
as.Date(d1$Lesion.PreGKRS,format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d"))
as.Date(d1$Lesion.PreGKRS,format = c("%Y-%m-%d"))
as.Date(d1$Lesion.PreGKRS,format = c("%Y/%m/%d"))
as.Date(d1$Lesion.PreGKRS,format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d"))
as.Date(d1$Lesion.PreGKRS,format = c("%m/%d/%Y"))
as.Date(d1$Lesion.PreGKRS,format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d"))
multidate <- function(data, formats){
a<-list()
for(i in 1:length(formats)){
a[[i]]<- as.Date(data,format=formats[i])
a[[1]][!is.na(a[[i]])]<-a[[i]][!is.na(a[[i]])]
}
a[[1]]
}
IS.Date()
IS.Date
format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d","%B %d, %Y")
multidate(d1$Lesion.PreGKRS,format)
d1$Lesion.PreGKRS
format = c("%m/%d/%Y", "%m-%d-%Y","%Y/%m/%d" ,"%Y-%m-%d","%B %d, %Y","%B/%d/%Y")
multidate(d1$Lesion.PreGKRS,format)
multidate(d2$Date.of.last.f.u)
multidate(d2$Date.of.last.f.u,formats)
multidate(d2$Date.of.last.f.u,format)
d2$Date.of.last.f.u
d2 = read.csv(path2)
d2$Date.of.last.f.u
format = c("%m/%d/%Y", "%m-%d-%Y","%B %d, %Y","%B/%d/%Y","%d %b %y","%d.%m.%Y","%Y/%m/%d" ,"%Y-%m-%d",)
format = c("%m/%d/%Y", "%m-%d-%Y","%B %d, %Y","%B/%d/%Y","%d %b %y","%d.%m.%Y","%Y/%m/%d" ,"%Y-%m-%d")
multidate(d1$Lesion.PreGKRS,format)
multidate(d2$Date.of.last.f.u,format)
multidate(d2$Date.of.last.f.u,c("%m/%d/%Y")
multidate(d2$Date.of.last.f.u,c("%m/%d/%Y"))
multidate(d2$Date.of.last.f.u,c("%m/%d/%Y"))
multidate(d2$Date.of.last.f.u,format)
format = c( "%m-%d-%Y","%B %d, %Y","%B/%d/%Y","%d %b %y","%d.%m.%Y","%Y/%m/%d" ,"%Y-%m-%d","%m/%d/%Y")
multidate(d2$Date.of.last.f.u,format)
path = "testdata/eg_date.xlsx"  #gdata is the best, XLConnect is the second
d1 = read.xls (path, sheet = 1, header = TRUE)
d1$Lesion.PreGKRS
d2$Date.of.last.f.u
mdy(d2$Date.of.last.f.u)
d1$Date.of.GKRS
d1
d1$Lesion.1st.F.UP.
as.Date(d1$Lesion.PreGKRS, format)
d1$Lesion.PreGKRS
as.Date(d1$Lesion.PreGKRS, format)
ttt <- fixDate(d1)
View(ttt)
warning()
warnings
warnings()
ttt <- fixDate(d2)
View(ttt)
View(d2)
library(shiny); source('V1_1009.R')
fixDate_col(d1$Lesion.PreGKRS)
warning()
?guess_formats
guess_formats(xx)
guess_formats(xx,"BdY")
guess_formats(xx,"mdy")
xx
x <- c('February 20th 1973',
"february  14, 2004",
"Sunday, May 1, 2000",
"Sunday, May 1, 2000",
"february  14, 04",
'Feb 20th 73',
"January 5 1999 at 7pm",
"jan 3 2010",
"Jan 1, 1999",
"jan 3   10",
"01 3 2010",
"1 3 10",
'1 13 89',
"5/27/1979",
"12/31/99",
"DOB:12/11/00",
"-----------",
'Thu, 1 July 2004 22:30:00',
'Thu, 1st of July 2004 at 22:30:00',
'Thu, 1July 2004 at 22:30:00',
'Thu, 1July2004 22:30:00',
'Thu, 1July04 22:30:00',
"21 Aug 2011, 11:15:34 pm",
"-----------",
"1979-05-27 05:00:59",
"1979-05-27",
"-----------",
"3 jan 2000",
"17 april 85",
"27/5/1979",
'20 01 89',
'00/13/10',
"-------",
"14 12 00",
"03:23:22 pm")
guess_formats(x, "BdY")
guess_formats(x, "Bdy")
guess_formats(d1$Lesion.PreGKRS, "Bdy")
guess_formats(x, "mdy", print_matches = TRUE)
guess_formats(x, "T", print_matches = TRUE)
mdy(x)
warning()
warning
guess_formats(x, "T", print_matches = TRUE)
mdy(x)
options(warn=1)
mdy(x)
options(warn=0)
mdy(x)
t1 <- fixDate(d1)
d1
t1 <- fixDate(d1)
length(d1[1,])
colnames(d1)
t1[,5]
d1[,5]
is.na(t1[,5])
is.na(t1[,5]) & is.na(d1[,5])
is.na(t1[,5]) & !is.na(d1[,5])
which(is.na(t1[,5]) & !is.na(d1[,5]))
d1(is.na(t1[,5]) & !is.na(d1[,5]))
d1[is.na(t1[,5]) & !is.na(d1[,5])]
d1[is.na(t1[,5]) & !is.na(d1[,5]),]
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
for(i in 1:length(d1[1,])){
rbind(d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
tt< NULL
for(i in 1:length(d1[1,])){
tt = rbind(tt,d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
tt<- NULL
for(i in 1:length(d1[1,])){
tt = rbind(tt,d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
tt
for(i in 1:length(d1[1,])){
tt = join(tt,d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
for(i in 1:length(d1[1,])){
tt = full_join(tt,d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
colnames(d1)
for(i in c(3,5,6,7,9,10)){
tt = full_join(tt,d1[is.na(t1[,i]) &!is.na(d1[,i]),])
}
i =3
d1[is.na(t1[,i]) &!is.na(d1[,i]),]
i =5
d1[is.na(t1[,i]) &!is.na(d1[,i]),]
d1[is.na(t1[,i]) &!is.na(d1[,i]),] -> t1
i = 6
d1[is.na(t1[,i]) &!is.na(d1[,i]),] -> t2
t2
i = 7
d1[is.na(t1[,i]) &!is.na(d1[,i]),] -> t3
tt1 <- fixDate(d1)
d1[is.na(t1[,i]) &!is.na(d1[,i]),] -> t2
d1[is.na(t1[,i]) &!is.na(d1[,i]),] -> t3
d1[is.na(tt1[,i]) &!is.na(d1[,i]),]
d1[is.na(tt1[,i]) &!is.na(d1[,i]),] -> t3
View(t3)
t3[,i]
tt1[,i]
d1[,i]
d1[is.na(tt1[,i]) &!is.na(d1[,i]),]
is.na(d1[is.na(tt1[,i]) &!is.na(d1[,i]),][,i])
d1[is.na(tt1[,i]) &!is.na(d1[,i]),][,i]
d1[is.na(tt1[,i]) &!is.na(d1[,i]),][,i] == ""
d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),] -> t3
full_join(t1,t3)
tt<- NULL
for(i in c(3,5,6,7,9,10)){
tt = full_join(tt,d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),])
}
datalist[[i]] = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
datalist = list()
for(i in c(3,5,6,7,9,10)){
datalist[[i]] = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
}
big_data = do.call(full_join, datalist)
datalist
datalist ! = NULL
datalist != NULL
datalist != NULL
i = range[1]
range = c(3,5,6,7,9,10)
i = range[1]
datawrong = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
range[2:]
range[2]
eg = NUILL
eg = NULL
is.null(eg)
datalist = list()
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp)){
datalist[[i]] = tmp
}
}
datalist
j = 1
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp)){
datalist[[j]] = tmp
j += 1
}
}
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp)){
datalist[[j]] = tmp
j = j + 1
}
}
datalist
datalist = list()
j = 1
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp)){
datalist[[j]] = tmp
j = j + 1
}
}
datalist
big_data = do.call(full_join, datalist)
datalist = list()
j = 1
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp) & length(tmp[,1]> 0)){
datalist[[j]] = tmp
j = j + 1
}
}
big_data = do.call(full_join, datalist)
big_data
datalist
big_data = do.call(full_join, datalist)
big_data = do.call(full_join(by = NULL), datalist)
big_data = do.call(unoin, datalist)
big_data = do.call(unoin(), datalist)
big_data = do.call(union(), datalist)
dplyr::union()
big_data = do.call(dplyr::union, datalist)
big_data
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
d1[1]
d1[2]
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
big_data = do.call(dplyr::union, NULL)
datalist = list()
big_data = do.call(dplyr::union, datalist)
datalist
datalist == NULL
is.null(datalist)
length(datalist)
length(datalist) == 0
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
big_data = do.call(dplyr::union, datalist)
for(i in c(3,5,6,7,9,10)){
tmp = d1[is.na(tt1[,i]) &!is.na(d1[,i])&(d1[,i] != ""),]
if(!is.null(tmp) & length(tmp[,1]> 0)){
datalist[[j]] = tmp
j = j + 1
}
}
big_data = do.call(dplyr::union, datalist)
datalist
big_data = do.call(dplyr::union, datalist)
tibble(a = 1, b= 1)
source('V1_1009.R')
source('V1_1009.R')
do <- read.csv(path2)
di <- do
do <- FuzzyClean(di)
source('V1_1009.R')
d_date_in <- cbind(`ID` = di[as.numeric(input$varID)],di[sapply(do, class) == "Date"])
d_date_out<- cbind(`ID` = di[as.numeric(input$varID)],do[sapply(do, class) == "Date"])
d_date_in <- cbind(di$patient.code,di[sapply(do, class) == "Date"])
d_date_out<- cbind(di$patient.code,do[sapply(do, class) == "Date"])
datalist = list()
j = 1
for(i in 2:length(d_date_out[1,])){
tmp = d_date_in[is.na(d_date_out[,i]) &!is.na(d_date_in[,i])&(d_date_in[,i] != ""),]
if(!is.null(tmp) & length(tmp[,1]> 0)){
datalist[[j]] = tmp
j = j + 1
}
}
datalist
do$Date
cbind(do$patient.code,  do$Date)
do[,c("patient.code",  "Date")]
di[,c("patient.code",  "Date")]
datalist
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
source('V1_1009.R')
