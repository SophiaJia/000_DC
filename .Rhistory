# the column is numeric
y = as.numeric(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
x
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
library(tidyverse)
parse_number("f3")
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
### text a column
text_filter_pre <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if(c2[,"number"]>0){
# the column is numeric
y = parse_number(x)
}else if(c2[,"text"]>0){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
text_filter_cell(Dtest$patient.code)
text_filter_pre(Dtest$patient.code)
text_filter_pre(Dtest[,1])
text_filter_pre(Dtest$Gender)
x <- Dtest$Gender
x
table(sapply(x,text_filter_cell))
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
names(C1)
names(c1)
"number" %>% names(c1)
"number" %in% names(c1)
# the column is numeric
y = parse_number(x)
### text a column
text_filter_pre <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if("number" %in% names(c1)){
# the column is numeric
y = parse_number(x)
}else if("text" %in% names(c1)){
# the column is text
y = fixchar_col(x)
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
text_filter_pre(Dtest$Gender)
text_filter_pre(Dtest$Date.of.birth)
text_filter_pre(Dtest$KPS)
text_filter_pre(Dtest$tnp)
text_filter_pre(Dtest$tn)
Dtest$tn
Dtest$tnp
text_filter_pre(Dtest$tnpr)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
install.packages("lubridate")
library(lubridate)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
library(tidyverse)
Dtmp <-
Dtest %>% fixDate() %>% text_filter_col()
Dtest %>% fixDate()
text_filter_cell("t;")
text_filter_cell <- function(x){
#input : string
#output : text, number, mix
#date variable consider as mix
options(warn=-1)
y = "Mtext"
if(is.na(x)) y = NA #csv file can recognize NA
else if(!grepl("[^A-Za-z]", x)) y = "text"
else if (!is.na(as.numeric(x))) y = "number"
else if(grepl("\\d",x)) y = "Mnumber"
y
}
library(shiny); runApp('Sophia_0712_shiny3.R')
install.packages("openxlsx")
runApp('Sophia_0712_shiny3.R')
install.packages("janitor")
runApp('Sophia_0712_shiny3.R')
install.packages("stringdist")
runApp('Sophia_0712_shiny3.R')
install.packages("tableone")
runApp('Sophia_0712_shiny3.R')
install.packages("shinyBS")
runApp('Sophia_0712_shiny3.R')
install.packages("shinyjs")
runApp('Sophia_0712_shiny3.R')
install.packages("DT")
runApp('Sophia_0712_shiny3.R')
install.packages("plotly")
runApp('Sophia_0712_shiny3.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
runApp('V1_0823.R')
library(shiny)
library(tidyverse)
library(openxlsx)
library(janitor)
library(stringdist)
library(lubridate)
library(tableone)
library(shinyBS)
library(shinyjs)
library(DT)
library(plotly)
library(readxl)
ui <- fluidPage(
# Here everything is an argument to fluidPage(), so commas are needed between blocks
titlePanel("Understand Your Data"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose XLSX/CSV File to Upload",accept=c(".xlsx",".csv")),
hr(),
textInput("varID", "Number of your ID colume", value = "1"),
radioButtons("datatype", label = "Data Type",
choices = list("Patient per row（Default）" = "wide","Visit per row" = "long"),
selected = 1),
hr(),
#textInput(inputId = "outFileName",label = "Output File Name:",value = "processed.xlsx"),
checkboxGroupInput("download_check", "Download",
choices = list("Clean Data" = 1, "Dirty/Clean Compare" = 2, "Transformed Data" = 3, "Table 1" = 4),
selected = 1),
downloadButton("downloadData", "Download Output"),
width = 3
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Instruction",
h5("Step one")
),
tabPanel("Continuous",
h4("Summary table"),
h5("This page summarizes the continuous variable of your data. If you think any range is incorrect, check it manually."),
dataTableOutput("inpContinuous"),
h4("Data Checking (Select the variable)"),
htmltools::div(style = "display:inline-block", plotlyOutput("con_hist", width = 540, height = 200)),
wellPanel(
style = "display:inline-block; vertical-align:bottom;",
sliderInput("xbins", "Number of x bins",
min = 1, max = 50, value = 20, width = 230)
),
textInput("con_min", "Minimum value", value = "0"),
textInput("con_max", "Maximum Value", value = "100"),
actionButton("con_check", label = "Check")
) ,
tabPanel("Categorical",
h4("1.Variables with one level, recommend remove"),
h5("These variables only have one layer. It might because 1) all of the patients have the same value, in which case you can remove this column; 2) it is non-random missing, in which case you should check your data."),
dataTableOutput("inpCategorical1"),
hr(),
h4("2.Variables with 2-4 levels, check correctness"),
h5("These variables have 2 - 4 levels, which is suitable for analysis. However, you still need to check if there are typos and make sure that the level number is correct. E.g., gender should has only two levels. "),
dataTableOutput("inpCategorical234"),
hr(),
h4("3.Variables more than 5 levels, recommend clean up"),
h5("These variables have more than four levels. It usually is not suitable for analysis. We recommend you to check if to and try your best to compress less than four. "),
dataTableOutput("inpCategorical5")),
tabPanel("Date",
h4("Date Summary"),
h4("Reorder the date column"),
dataTableOutput("inpDate"),
actionButton("date_exchage", label = "Reorder"),
actionButton("date_notshow", label = "Hide"),
actionButton("date_reset", label = "Reset"),
actionButton("date_check",   label = "Check"),
h4("Something wrong with the date"),
dataTableOutput("date_wrong_out")
),
tabPanel("Cleaned Data",
h5("If your data is repeated measure and has per visit per row,choose the column that indicates patient characteristics"),
dataTableOutput("afterclean")
),
tabPanel("Wide Type Data",
h5("This is for repeated measure data only"),
dataTableOutput("wide")),
tabPanel("Summary",
h4("Summary"),
textOutput("inpSummary"),
hr(),
#h4("Exact Duplicate"),
#dataTableOutput("dup"),
#hr(),
h4("Table 1"),
dataTableOutput("table1"),
h5("We made some default changes to your data; please download for more details."))
)
)
)
)
server <- function(input, output, session) {
options(shiny.maxRequestSize=30*1024^2)
options(DT.options = list(pageLength = 15))
}
shinyApp(ui, server)
options(shiny.maxRequestSize=30*1024^2)
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
library(shiny); runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0823.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
?setdiff
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
runApp('V1_0906.R')
library(shiny); runApp('V1_0906.R')
runApp('V1_0911.R')
library(shiny); runApp('V1_0911.R')
runApp('V1_0911.R')
TheTable1 <-function(Data, con_var = NULL, cat_var = NULL, output = NULL){
# input require Data, con variable and cat variable are optional
# output Table 1, output to excel is optional
if (is.null(con_var)){
con_var   <- colnames(Data)[sapply(Data, class) == "numeric"]
#con_names <- colnames(NewDat)[sapply(NewDat, class) == "numeric"]
}
if(is.null(cat_var)){
cat_var_f <- colnames(Data)[sapply(Data, class) == "factor"]
cat_var_char   <- colnames(Data)[sapply(Data, class) == "character"]
#cat_names <- colnames(NewDat)[sapply(NewDat, class) == "character"]
cat_var <- c(cat_var_f, cat_var_char)
}
all_var <- c(con_var, cat_var)
table1tmp <- CreateTableOne(vars = all_var, factorVars = cat_var, data = Data, includeNA = F)
X1=print(table1tmp, quote = FALSE, noSpaces = TRUE, showAllLevels = TRUE,minMax = T, nonnormal = con_var)
Variable=row.names(X1)
Variable[1]="Total number of cases"
d=data.frame(Variable,X1)
if(!is.null(output)){
p2excel(datastable = d, filename = output)
}else{
d
}
}
runApp('V1_0911.R')
runApp('V1_0911.R')
runApp('V1_0911.R')
runApp('V1_0911.R')
?write.csv
runApp('V1_0911.R')
runApp('V1_0911.R')
runApp('V1_0911.R')
runApp('V1_0911.R')
runApp('V1_0911.R')
ui <- fluidPage(
# App title ----
titlePanel("Downloading Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
shinyApp(ui, server)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
ui <- fluidPage(
# App title ----
titlePanel("Downloading Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
runApp(shinyApp(ui, server), launch.browser = TRUE)
source('V1_0911.R')
source('V1_0911.R')
source('V1_0911.R')
source('V1_0911.R')
source('V1_0911.R')
source('V1_0911.R')
library(shiny); source('V1_0911.R')
source('V1_0911.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
x
plot_ly(x = x, y = table(x),type = "bar",marker = m2)
plot_ly(x = x, y = table(x),type = "bar")
x
table(y)
table(x)
table(table(x) )
names(table(x) )
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('V1_1001.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
eg_long <- read_csv("testdata/eg1.csv")
text_filter_cell <- function(x){
#input : string
#output : text, number, mix
#date variable consider as mix
options(warn=-1)
y = "Mtext"
if(is.na(x)) y = NA #csv file can recognize NA
else if(!grepl("[^A-Za-z]", x)) y = "text"
else if (!is.na(as.numeric(x))) y = "number"
else if(grepl("\\d",x)) y = "Mnumber"
y
}
#testing
letters <- "abc"
numbers <- "12.3"
mix <- "b1dd"
tmp <- eg_long$WBRT.dose
tmp2 <- paste(eg_long$WBRT.dose, eg_long$Pathology)
text_filter_cell(letters)
text_filter_cell(numbers)
text_filter_cell(mix)
text_filter_cell(tmp2[7])
text_filter_cell("32;")
text_filter_cell(";")
text_filter_cell("t;")
text_filter_cell("1.1.1.1.1")
### text a column
text_filter_col <- function(x){
#input : a column
#output, check the percentage of text, number, mix in this column
c1 <- table(sapply(x,text_filter_cell))
c2 <- as.matrix(c1) %>% t
if("number" %in% names(c1)){
# the column is numeric
y = FALSE
}else if("text" %in% names(c1)){
# the column is text
y = TRUE
}else{
# consider as number unless noted
y = parse_number(x)
}
y
}
library(shiny); source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
source('ShinyApp.R')
library(shiny); source('ShinyApp.R')
source('arch/V1_1001.R')
